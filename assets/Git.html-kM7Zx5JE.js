import{_ as e,c as n,a,o as i}from"./app-BKTJUtEL.js";const l={};function t(c,s){return i(),n("div",null,s[0]||(s[0]=[a(`<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><h1 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库"><span>初始化仓库</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>作用</strong> 将当前目录转换为 Git 仓库，创建隐藏的 <code>.git</code> 目录（存储版本历史、配置等）。</li><li><strong>深入场景</strong><ul><li>将已有项目纳入 Git 管理：在需要版本控制的项目的根目录执行 <code>git init</code>。</li><li>重新初始化仓库：删除 <code>.git</code> 文件夹后再次运行 <code>git init</code>（慎用，会丢失历史记录）。</li></ul></li><li><strong>注意事项</strong><ul><li>初始化后需通过 <code>git add</code> 和 <code>git commit</code> 提交初始文件。</li><li>使用 <code>git init --bare</code> 创建“裸仓库”（无工作区，常用于远程服务器）。</li></ul></li></ul><h1 id="克隆仓库" tabindex="-1"><a class="header-anchor" href="#克隆仓库"><span>克隆仓库</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone <span class="token punctuation">[</span>远程仓库Url<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>作用</strong> 完整复制远程仓库到本地，包括<strong>所有</strong>历史记录和分支。</li><li><strong>参数扩展</strong><ul><li><code>git clone [url] [directory]</code>：指定本地目录名。</li><li><code>git clone --branch [branch-name] [url]</code>：克隆特定分支。</li></ul></li><li><strong>协议支持</strong><ul><li>HTTPS：<code>https://github.com/user/repo.git</code></li><li>SSH：<code>git@github.com:user/repo.git</code></li><li>Git：<code>git://github.com/user/repo.git</code></li></ul></li><li><strong>技巧</strong><ul><li>克隆后自动进入仓库目录（默认与远程仓库同名）。</li></ul></li></ul><h1 id="状态查看" tabindex="-1"><a class="header-anchor" href="#状态查看"><span>状态查看</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>关键状态</strong><ul><li><strong>Untracked</strong>：文件未被 Git 跟踪。</li><li><strong>Modified</strong>：文件已修改但未暂存。</li><li><strong>Staged</strong>：文件已暂存，等待提交。</li></ul></li><li><strong>进阶用法</strong><ul><li><code>git status -s</code>：简洁模式（标记文件状态，如 <code>M</code> 修改、<code>??</code> 未跟踪）。</li><li><code>git status --ignored</code>：显示被忽略的文件（需配合 <code>.gitignore</code>）。</li></ul></li></ul><h1 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h1><h2 id="将修改添加到暂存区" tabindex="-1"><a class="header-anchor" href="#将修改添加到暂存区"><span>将修改添加到暂存区</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 指定文件</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span></span>
<span class="line"><span class="token comment"># 全部文件</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>暂存区作用</strong> 将文件的当前版本“快照”保存到暂存区，为提交做准备。</li><li><strong>灵活操作</strong><ul><li><code>git add -p</code>：交互式选择部分修改内容暂存（分块提交）。</li><li><code>git add -u</code>：仅添加已跟踪文件的修改（不包含新文件）。</li></ul></li><li><strong>忽略文件</strong><ul><li>使用 <code>.gitignore</code> 文件排除日志、临时文件等（如 <code>*.log</code>, <code>node_modules/</code>）。</li><li>全局忽略：<code>git config --global core.excludesfile ~/.gitignore_global</code>。</li></ul></li></ul><h2 id="提交修改" tabindex="-1"><a class="header-anchor" href="#提交修改"><span>提交修改</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;修改日志&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>提交信息规范</strong><ul><li>第一行简短描述（如 <code>feat: Add login function</code>）。</li><li>空一行后详细说明（可选）。</li><li>遵循约定式提交（Conventional Commits）。</li></ul></li><li><strong>修复提交</strong><ul><li><code>git commit --amend</code>：修改最后一次提交（如修正信息或补充文件）。</li><li><code>git reset HEAD~1</code>：撤销最后一次提交（慎用，需重新暂存文件）。</li></ul></li><li><strong>自动关联修改</strong><ul><li><code>git commit -a -m &quot;message&quot;</code>：跳过 <code>git add</code>，直接提交所有已跟踪文件的修改。</li></ul></li></ul><h2 id="查看提交日志" tabindex="-1"><a class="header-anchor" href="#查看提交日志"><span>查看提交日志</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>常用参数</strong><ul><li><code>git log --oneline</code>：单行显示提交信息。</li><li><code>git log -p</code>：显示具体修改内容。</li><li><code>git log --graph</code>：图形化分支合并历史。</li><li><code>git log --author=&quot;name&quot;</code>：按作者筛选提交。</li></ul></li><li><strong>查找内容</strong><ul><li><code>git log -S &quot;keyword&quot;</code>：搜索包含关键字的提交。</li><li><code>git log --since=&quot;2023-01-01&quot;</code>：按时间筛选。</li></ul></li><li><strong>查看差异</strong><ul><li><code>git diff</code>：比较工作区和暂存区。</li><li><code>git diff --staged</code>：比较暂存区和最新提交。</li></ul></li></ul><h1 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作"><span>分支操作</span></a></h1><h2 id="基础操作" tabindex="-1"><a class="header-anchor" href="#基础操作"><span>基础操作</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 列出所有分支（-a 显示远程分支）</span></span>
<span class="line"><span class="token function">git</span> branch</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除分支（需合并后才能删除）</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 强制删除未合并分支</span></span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建并切换分支</span></span>
<span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并与冲突" tabindex="-1"><a class="header-anchor" href="#合并与冲突"><span>合并与冲突</span></a></h2><ul><li><strong>合并策略</strong><ul><li><strong>Fast-forward</strong>：当前分支无新提交时直接移动指针。</li><li><strong>Recursive</strong>：生成合并提交（需解决冲突）。</li></ul></li><li><strong>解决冲突</strong><ol><li>手动编辑冲突文件（标记为 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>）， 使用notepadfree之类的工具手动解决即可</li><li><code>git add</code> 标记已解决的文件。</li><li><code>git commit</code> 完成合并。</li></ol></li></ul><h1 id="远程仓库操作" tabindex="-1"><a class="header-anchor" href="#远程仓库操作"><span>远程仓库操作</span></a></h1><h2 id="git-remote" tabindex="-1"><a class="header-anchor" href="#git-remote"><span>git remote</span></a></h2><ul><li><code>git remote -v</code>：查看远程仓库地址。</li><li><code>git remote add [name] [url]</code>：添加远程仓库（默认 <code>origin</code>）</li><li><code>git remote remove [name]</code>：删除远程仓库关联</li></ul><h2 id="git-pull" tabindex="-1"><a class="header-anchor" href="#git-pull"><span>git pull</span></a></h2><ul><li><code>git pull</code> 命令用于从远程仓库获取最新的更改，并自动尝试将其合并到当前分支中</li><li>相当于 <code>git fetch</code> 和 <code>git merge</code> 的组合：首先它会获取远程仓库的所有更新（<code>fetch</code>），然后尝试将这些更新合并到本地代码库中（<code>merge</code>）</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> pull <span class="token punctuation">[</span>远程仓库<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将 远程仓库：远程分支 拉取到当前所在的本地分支</li><li>如果省略 <code>[remote]</code> 和 <code>[branch]</code>，Git 会使用默认的远程仓库（通常是 <code>origin</code>）和当前所在的分支</li></ul><h2 id="git-push" tabindex="-1"><a class="header-anchor" href="#git-push"><span>git push</span></a></h2><h3 id="将-本地分支-推到-远程主机-的-远程分支-上-如果-远程分支-不存在则自动创建" tabindex="-1"><a class="header-anchor" href="#将-本地分支-推到-远程主机-的-远程分支-上-如果-远程分支-不存在则自动创建"><span>将&lt;本地分支&gt;推到&lt;远程主机&gt;的&lt;远程分支&gt;上，如果&lt;远程分支&gt;不存在则自动创建</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如果省略远程分支名-则表示将本地分支推送与之存在-追踪关系-的远程分支-通常两者同名-如果该远程分支不存在-则会被新建" tabindex="-1"><a class="header-anchor" href="#如果省略远程分支名-则表示将本地分支推送与之存在-追踪关系-的远程分支-通常两者同名-如果该远程分支不存在-则会被新建"><span>如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 把本地master分支推送到远程仓库的master分支</span></span>
<span class="line"><span class="token function">git</span> push origin master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如果省略本地分支名-则表示删除指定的远程分支-因为这等同于推送一个空的本地分支到远程分支" tabindex="-1"><a class="header-anchor" href="#如果省略本地分支名-则表示删除指定的远程分支-因为这等同于推送一个空的本地分支到远程分支"><span>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push origin :master</span>
<span class="line"><span class="token comment"># 等同于 表示删除origin主机的master分支</span></span>
<span class="line"><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如果当前分支与远程分支之间存在追踪关系-则本地分支和远程分支都可以省略" tabindex="-1"><a class="header-anchor" href="#如果当前分支与远程分支之间存在追踪关系-则本地分支和远程分支都可以省略"><span>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push origin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如果当前分支只有一个追踪分支-主机名也可以省略" tabindex="-1"><a class="header-anchor" href="#如果当前分支只有一个追踪分支-主机名也可以省略"><span>如果当前分支只有一个追踪分支，主机名也可以省略</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如果当前分支有多个追踪分支-可以使用-u选项指定一个默认主机-之后就可以直接使用git-push了" tabindex="-1"><a class="header-anchor" href="#如果当前分支有多个追踪分支-可以使用-u选项指定一个默认主机-之后就可以直接使用git-push了"><span>如果当前分支有多个追踪分支，可以使用<code>-u</code>选项指定一个默认主机，之后就可以直接使用<code>git push</code>了</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 将本地的master分支推送到origin主机，同时指定origin为默认主机</span></span>
<span class="line"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,45)]))}const o=e(l,[["render",t],["__file","Git.html.vue"]]),r=JSON.parse('{"path":"/pages/tool/Git.html","title":"Git","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"将修改添加到暂存区","slug":"将修改添加到暂存区","link":"#将修改添加到暂存区","children":[]},{"level":2,"title":"提交修改","slug":"提交修改","link":"#提交修改","children":[]},{"level":2,"title":"查看提交日志","slug":"查看提交日志","link":"#查看提交日志","children":[]},{"level":2,"title":"基础操作","slug":"基础操作","link":"#基础操作","children":[]},{"level":2,"title":"合并与冲突","slug":"合并与冲突","link":"#合并与冲突","children":[]},{"level":2,"title":"git remote","slug":"git-remote","link":"#git-remote","children":[]},{"level":2,"title":"git pull","slug":"git-pull","link":"#git-pull","children":[]},{"level":2,"title":"git push","slug":"git-push","link":"#git-push","children":[{"level":3,"title":"将<本地分支>推到<远程主机>的<远程分支>上，如果<远程分支>不存在则自动创建","slug":"将-本地分支-推到-远程主机-的-远程分支-上-如果-远程分支-不存在则自动创建","link":"#将-本地分支-推到-远程主机-的-远程分支-上-如果-远程分支-不存在则自动创建","children":[]},{"level":3,"title":"如果省略远程分支名，则表示将本地分支推送与之存在\\"追踪关系\\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建","slug":"如果省略远程分支名-则表示将本地分支推送与之存在-追踪关系-的远程分支-通常两者同名-如果该远程分支不存在-则会被新建","link":"#如果省略远程分支名-则表示将本地分支推送与之存在-追踪关系-的远程分支-通常两者同名-如果该远程分支不存在-则会被新建","children":[]},{"level":3,"title":"如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支","slug":"如果省略本地分支名-则表示删除指定的远程分支-因为这等同于推送一个空的本地分支到远程分支","link":"#如果省略本地分支名-则表示删除指定的远程分支-因为这等同于推送一个空的本地分支到远程分支","children":[]},{"level":3,"title":"如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略","slug":"如果当前分支与远程分支之间存在追踪关系-则本地分支和远程分支都可以省略","link":"#如果当前分支与远程分支之间存在追踪关系-则本地分支和远程分支都可以省略","children":[]},{"level":3,"title":"如果当前分支只有一个追踪分支，主机名也可以省略","slug":"如果当前分支只有一个追踪分支-主机名也可以省略","link":"#如果当前分支只有一个追踪分支-主机名也可以省略","children":[]},{"level":3,"title":"如果当前分支有多个追踪分支，可以使用-u选项指定一个默认主机，之后就可以直接使用git push了","slug":"如果当前分支有多个追踪分支-可以使用-u选项指定一个默认主机-之后就可以直接使用git-push了","link":"#如果当前分支有多个追踪分支-可以使用-u选项指定一个默认主机-之后就可以直接使用git-push了","children":[]}]}],"git":{"updatedTime":1740538428000,"contributors":[{"name":"古月HYuan","username":"古月HYuan","email":"21628224@qq.com","commits":2,"url":"https://github.com/古月HYuan"}]},"filePathRelative":"pages/tool/Git.md"}');export{o as comp,r as data};
